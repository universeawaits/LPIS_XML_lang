//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\User\source\repos\xmllang\xmllang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace xmllang {
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
	[System.CLSCompliant(false)]
	public partial class xmllangParser : Parser {
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			T__0=1, FOR=2, IF=3, IN=4, TAG=5, ELSE=6, ATTR=7, NAME=8, TEXT=9, NODES=10, 
			ATTRS=11, GEN=12, PRINT=13, VALUE=14, PARSE=15, ARRAY=16, SWITCH=17, CASE=18, 
			DEFAULT=19, AT=20, ID=21, FILENAME=22, STRING=23, NEWLINE=24, ASSIGN=25, 
			EQ=26, NOT=27, APPEND_ATTR=28, APPEND_CHILD=29, REMOVE_ATTR=30, REMOVE_CHILD=31, 
			ROOT=32, INT=33, QT=34, COLON=35, OPEN_BRACKET=36, CLOSE_BRACKET=37, SPACE=38, 
			COMMA=39, ARROW=40, DOT=41, OPEN_BLOCK=42, CLOSE_BLOCK=43, HASHTAG=44;
		public const int
			RULE_tale = 0, RULE_statement = 1, RULE_access_info = 2, RULE_value = 3, 
			RULE_case_block = 4, RULE_print_statement = 5, RULE_begin_for = 6, RULE_end = 7, 
			RULE_datatype = 8, RULE_function_decl = 9, RULE_begin_if = 10, RULE_comparison = 11, 
			RULE_else_thing = 12, RULE_comment = 13, RULE_switch_stat = 14;
		public static readonly string[] ruleNames = {
			"tale", "statement", "access_info", "value", "case_block", "print_statement", 
			"begin_for", "end", "datatype", "function_decl", "begin_if", "comparison", 
			"else_thing", "comment", "switch_stat"
		};

		private static readonly string[] _LiteralNames = {
			null, "'int'", "'for each'", "'if'", "'in'", "'node'", "'else'", "'attr'", 
			"'name'", "'text'", "'nodes'", "'attrs'", "'generate'", "'print'", "'value'", 
			"'parse'", "'array'", "'switch'", "'case'", "'default'", "'@'", null, 
			null, null, null, "'='", "'=='", "'!='", "'adds attr'", "'adds child'", 
			"'removes attr'", "'removes child'", "'!'", null, "'\"'", "':'", "'('", 
			"')'", "' '", "','", "'->'", "'.'", "'{'", "'}'", "'#'"
		};
		private static readonly string[] _SymbolicNames = {
			null, null, "FOR", "IF", "IN", "TAG", "ELSE", "ATTR", "NAME", "TEXT", 
			"NODES", "ATTRS", "GEN", "PRINT", "VALUE", "PARSE", "ARRAY", "SWITCH", 
			"CASE", "DEFAULT", "AT", "ID", "FILENAME", "STRING", "NEWLINE", "ASSIGN", 
			"EQ", "NOT", "APPEND_ATTR", "APPEND_CHILD", "REMOVE_ATTR", "REMOVE_CHILD", 
			"ROOT", "INT", "QT", "COLON", "OPEN_BRACKET", "CLOSE_BRACKET", "SPACE", 
			"COMMA", "ARROW", "DOT", "OPEN_BLOCK", "CLOSE_BLOCK", "HASHTAG"
		};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "xmllang.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return new string(_serializedATN); } }

		static xmllangParser() {
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

			public xmllangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

			public xmllangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
			: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}
		public partial class TaleContext : ParserRuleContext {
			public StatementContext[] statement() {
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i) {
				return GetRuleContext<StatementContext>(i);
			}
			public TaleContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_tale; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterTale(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitTale(this);
			}
		}

		[RuleVersion(0)]
		public TaleContext tale() {
			TaleContext _localctx = new TaleContext(Context, State);
			EnterRule(_localctx, 0, RULE_tale);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 30; statement();
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << TAG) | (1L << ATTR) | (1L << GEN) | (1L << PRINT) | (1L << PARSE) | (1L << ARRAY) | (1L << ID) | (1L << SPACE) | (1L << HASHTAG))) != 0) );
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StatementContext : ParserRuleContext {
			public StatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_statement; } }
		
			public StatementContext() { }
			public virtual void CopyFrom(StatementContext context) {
				base.CopyFrom(context);
			}
		}
		public partial class Assign_new_valueContext : StatementContext {
			public Access_infoContext access_info() {
				return GetRuleContext<Access_infoContext>(0);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ASSIGN() { return GetToken(xmllangParser.ASSIGN, 0); }
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Assign_new_valueContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAssign_new_value(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAssign_new_value(this);
			}
		}
		public partial class Gen_fileContext : StatementContext {
			public ITerminalNode GEN() { return GetToken(xmllangParser.GEN, 0); }
			public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode COMMA() { return GetToken(xmllangParser.COMMA, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Gen_fileContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterGen_file(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitGen_file(this);
			}
		}
		public partial class For_cycleContext : StatementContext {
			public Begin_forContext begin_for() {
				return GetRuleContext<Begin_forContext>(0);
			}
			public EndContext end() {
				return GetRuleContext<EndContext>(0);
			}
			public StatementContext[] statement() {
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i) {
				return GetRuleContext<StatementContext>(i);
			}
			public For_cycleContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterFor_cycle(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitFor_cycle(this);
			}
		}
		public partial class Function_callContext : StatementContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
			public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public ITerminalNode[] COMMA() { return GetTokens(xmllangParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(xmllangParser.COMMA, i);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public Function_callContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterFunction_call(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitFunction_call(this);
			}
		}
		public partial class Declare_arrayContext : StatementContext {
			public ITerminalNode ARRAY() { return GetToken(xmllangParser.ARRAY, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Declare_arrayContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterDeclare_array(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitDeclare_array(this);
			}
		}
		public partial class If_declarationContext : StatementContext {
			public Begin_ifContext begin_if() {
				return GetRuleContext<Begin_ifContext>(0);
			}
			public EndContext end() {
				return GetRuleContext<EndContext>(0);
			}
			public StatementContext[] statement() {
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i) {
				return GetRuleContext<StatementContext>(i);
			}
			public Else_thingContext else_thing() {
				return GetRuleContext<Else_thingContext>(0);
			}
			public If_declarationContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterIf_declaration(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitIf_declaration(this);
			}
		}
		public partial class Parse_fileContext : StatementContext {
			public ITerminalNode PARSE() { return GetToken(xmllangParser.PARSE, 0); }
			public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode COMMA() { return GetToken(xmllangParser.COMMA, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Parse_fileContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterParse_file(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitParse_file(this);
			}
		}
		public partial class Search_tagContext : StatementContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ASSIGN() { return GetToken(xmllangParser.ASSIGN, 0); }
			public ITerminalNode AT() { return GetToken(xmllangParser.AT, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Search_tagContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterSearch_tag(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitSearch_tag(this);
			}
		}
		public partial class PrintContext : StatementContext {
			public Print_statementContext print_statement() {
				return GetRuleContext<Print_statementContext>(0);
			}
			public PrintContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterPrint(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitPrint(this);
			}
		}
		public partial class Append_tagContext : StatementContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode APPEND_CHILD() { return GetToken(xmllangParser.APPEND_CHILD, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Append_tagContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAppend_tag(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAppend_tag(this);
			}
		}
		public partial class Comment_funContext : StatementContext {
			public CommentContext comment() {
				return GetRuleContext<CommentContext>(0);
			}
			public Comment_funContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterComment_fun(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitComment_fun(this);
			}
		}
		public partial class Tag_assignmentContext : StatementContext {
			public ITerminalNode TAG() { return GetToken(xmllangParser.TAG, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Tag_assignmentContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterTag_assignment(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitTag_assignment(this);
			}
		}
		public partial class Append_atrContext : StatementContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode APPEND_ATTR() { return GetToken(xmllangParser.APPEND_ATTR, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Append_atrContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAppend_atr(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAppend_atr(this);
			}
		}
		public partial class Remove_atrContext : StatementContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode REMOVE_ATTR() { return GetToken(xmllangParser.REMOVE_ATTR, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Remove_atrContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterRemove_atr(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitRemove_atr(this);
			}
		}
		public partial class Attr_assignmentContext : StatementContext {
			public ITerminalNode ATTR() { return GetToken(xmllangParser.ATTR, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
			public ITerminalNode[] STRING() { return GetTokens(xmllangParser.STRING); }
			public ITerminalNode STRING(int i) {
				return GetToken(xmllangParser.STRING, i);
			}
			public ITerminalNode COMMA() { return GetToken(xmllangParser.COMMA, 0); }
			public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Attr_assignmentContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAttr_assignment(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAttr_assignment(this);
			}
		}
		public partial class Add_textContext : StatementContext {
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ASSIGN() { return GetToken(xmllangParser.ASSIGN, 0); }
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Add_textContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAdd_text(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAdd_text(this);
			}
		}
		public partial class Remove_tagContext : StatementContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode REMOVE_CHILD() { return GetToken(xmllangParser.REMOVE_CHILD, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Remove_tagContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterRemove_tag(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitRemove_tag(this);
			}
		}
		public partial class Function_declarationContext : StatementContext {
			public Function_declContext function_decl() {
				return GetRuleContext<Function_declContext>(0);
			}
			public EndContext end() {
				return GetRuleContext<EndContext>(0);
			}
			public StatementContext[] statement() {
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i) {
				return GetRuleContext<StatementContext>(i);
			}
			public Function_declarationContext(StatementContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterFunction_declaration(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitFunction_declaration(this);
			}
		}

		[RuleVersion(0)]
		public StatementContext statement() {
			StatementContext _localctx = new StatementContext(Context, State);
			EnterRule(_localctx, 2, RULE_statement);
			int _la;
			try {
				int _alt;
				State = 241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					_localctx = new Tag_assignmentContext(_localctx);
					EnterOuterAlt(_localctx, 1);
					{
					State = 38;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 35; Match(SPACE);
						}
						}
						State = 40;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 41; Match(TAG);
					State = 42; Match(SPACE);
					State = 43; Match(ID);
					State = 44; Match(OPEN_BRACKET);
					State = 45; Match(STRING);
					State = 46; Match(CLOSE_BRACKET);
					State = 47; Match(NEWLINE);
					}
					break;
				case 2:
					_localctx = new Attr_assignmentContext(_localctx);
					EnterOuterAlt(_localctx, 2);
					{
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 48; Match(SPACE);
						}
						}
						State = 53;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 54; Match(ATTR);
					State = 55; Match(SPACE);
					State = 56; Match(ID);
					State = 57; Match(OPEN_BRACKET);
					State = 58; Match(STRING);
					State = 59; Match(COMMA);
					State = 60; Match(SPACE);
					State = 61; Match(STRING);
					State = 62; Match(CLOSE_BRACKET);
					State = 63; Match(NEWLINE);
					}
					break;
				case 3:
					_localctx = new Gen_fileContext(_localctx);
					EnterOuterAlt(_localctx, 3);
					{
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 64; Match(SPACE);
						}
						}
						State = 69;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 70; Match(GEN);
					State = 71; Match(OPEN_BRACKET);
					State = 72; Match(ID);
					State = 73; Match(COMMA);
					State = 74; Match(SPACE);
					State = 75; Match(STRING);
					State = 76; Match(CLOSE_BRACKET);
					State = 77; Match(NEWLINE);
					}
					break;
				case 4:
					_localctx = new Parse_fileContext(_localctx);
					EnterOuterAlt(_localctx, 4);
					{
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 78; Match(SPACE);
						}
						}
						State = 83;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 84; Match(PARSE);
					State = 85; Match(OPEN_BRACKET);
					State = 86; Match(ID);
					State = 87; Match(COMMA);
					State = 88; Match(SPACE);
					State = 89; Match(STRING);
					State = 90; Match(CLOSE_BRACKET);
					State = 91; Match(NEWLINE);
					}
					break;
				case 5:
					_localctx = new Add_textContext(_localctx);
					EnterOuterAlt(_localctx, 5);
					{
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 92; Match(SPACE);
						}
						}
						State = 97;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 98; Match(ID);
					State = 99; Match(SPACE);
					State = 100; Match(ASSIGN);
					State = 101; Match(SPACE);
					State = 102; Match(STRING);
					State = 103; Match(NEWLINE);
					}
					break;
				case 6:
					_localctx = new Append_tagContext(_localctx);
					EnterOuterAlt(_localctx, 6);
					{
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 104; Match(SPACE);
						}
						}
						State = 109;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 110; Match(ID);
					State = 111; Match(SPACE);
					State = 112; Match(APPEND_CHILD);
					State = 113; Match(SPACE);
					State = 114; Match(ID);
					State = 115; Match(NEWLINE);
					}
					break;
				case 7:
					_localctx = new Append_atrContext(_localctx);
					EnterOuterAlt(_localctx, 7);
					{
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 116; Match(SPACE);
						}
						}
						State = 121;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 122; Match(ID);
					State = 123; Match(SPACE);
					State = 124; Match(APPEND_ATTR);
					State = 125; Match(SPACE);
					State = 126; Match(ID);
					State = 127; Match(NEWLINE);
					}
					break;
				case 8:
					_localctx = new Remove_tagContext(_localctx);
					EnterOuterAlt(_localctx, 8);
					{
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 128; Match(SPACE);
						}
						}
						State = 133;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 134; Match(ID);
					State = 135; Match(SPACE);
					State = 136; Match(REMOVE_CHILD);
					State = 137; Match(SPACE);
					State = 138; Match(ID);
					State = 139; Match(NEWLINE);
					}
					break;
				case 9:
					_localctx = new Remove_atrContext(_localctx);
					EnterOuterAlt(_localctx, 9);
					{
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 140; Match(SPACE);
						}
						}
						State = 145;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 146; Match(ID);
					State = 147; Match(SPACE);
					State = 148; Match(REMOVE_ATTR);
					State = 149; Match(SPACE);
					State = 150; Match(ID);
					State = 151; Match(NEWLINE);
					}
					break;
				case 10:
					_localctx = new Declare_arrayContext(_localctx);
					EnterOuterAlt(_localctx, 10);
					{
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 152; Match(SPACE);
						}
						}
						State = 157;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 158; Match(ARRAY);
					State = 159; Match(SPACE);
					State = 160; Match(ID);
					State = 161; Match(NEWLINE);
					}
					break;
				case 11:
					_localctx = new Search_tagContext(_localctx);
					EnterOuterAlt(_localctx, 11);
					{
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 162; Match(SPACE);
						}
						}
						State = 167;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 168; Match(ID);
					State = 169; Match(SPACE);
					State = 170; Match(ASSIGN);
					State = 171; Match(SPACE);
					State = 172; Match(ID);
					State = 173; Match(AT);
					State = 174; Match(ID);
					State = 175; Match(NEWLINE);
					}
					break;
				case 12:
					_localctx = new For_cycleContext(_localctx);
					EnterOuterAlt(_localctx, 12);
					{
					State = 176; begin_for();
					State = 178;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 177; statement();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 180;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 182; end();
					}
					break;
				case 13:
					_localctx = new Function_declarationContext(_localctx);
					EnterOuterAlt(_localctx, 13);
					{
					State = 184; function_decl();
					State = 186;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 185; statement();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 188;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 190; end();
					}
					break;
				case 14:
					_localctx = new Function_callContext(_localctx);
					EnterOuterAlt(_localctx, 14);
					{
					State = 192; Match(ID);
					State = 193; Match(OPEN_BRACKET);
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ID) {
						{
						{
						State = 194; Match(ID);
						State = 200;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 195; Match(COMMA);
							State = 196; Match(SPACE);
							State = 197; Match(ID);
							}
							}
							State = 202;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						State = 207;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 208; Match(CLOSE_BRACKET);
					State = 209; Match(NEWLINE);
					}
					break;
				case 15:
					_localctx = new If_declarationContext(_localctx);
					EnterOuterAlt(_localctx, 15);
					{
					State = 210; begin_if();
					State = 212;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 211; statement();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 214;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 222;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						State = 216; else_thing();
						State = 218;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 217; statement();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 220;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					State = 224; end();
					}
					break;
				case 16:
					_localctx = new Assign_new_valueContext(_localctx);
					EnterOuterAlt(_localctx, 16);
					{
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SPACE) {
						{
						{
						State = 226; Match(SPACE);
						}
						}
						State = 231;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 232; access_info();
					State = 233; Match(SPACE);
					State = 234; Match(ASSIGN);
					State = 235; Match(SPACE);
					State = 236; Match(STRING);
					State = 237; Match(NEWLINE);
					}
					break;
				case 17:
					_localctx = new Comment_funContext(_localctx);
					EnterOuterAlt(_localctx, 17);
					{
					State = 239; comment();
					}
					break;
				case 18:
					_localctx = new PrintContext(_localctx);
					EnterOuterAlt(_localctx, 18);
					{
					State = 240; print_statement();
					}
					break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Access_infoContext : ParserRuleContext {
			public Access_infoContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_access_info; } }
		
			public Access_infoContext() { }
			public virtual void CopyFrom(Access_infoContext context) {
				base.CopyFrom(context);
			}
		}
		public partial class Access_nameContext : Access_infoContext {
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode ARROW() { return GetToken(xmllangParser.ARROW, 0); }
			public ITerminalNode NAME() { return GetToken(xmllangParser.NAME, 0); }
			public Access_nameContext(Access_infoContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAccess_name(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAccess_name(this);
			}
		}
		public partial class Access_valueContext : Access_infoContext {
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode ARROW() { return GetToken(xmllangParser.ARROW, 0); }
			public ITerminalNode VALUE() { return GetToken(xmllangParser.VALUE, 0); }
			public Access_valueContext(Access_infoContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAccess_value(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAccess_value(this);
			}
		}
		public partial class Access_textContext : Access_infoContext {
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode ARROW() { return GetToken(xmllangParser.ARROW, 0); }
			public ITerminalNode TEXT() { return GetToken(xmllangParser.TEXT, 0); }
			public Access_textContext(Access_infoContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterAccess_text(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitAccess_text(this);
			}
		}

		[RuleVersion(0)]
		public Access_infoContext access_info() {
			Access_infoContext _localctx = new Access_infoContext(Context, State);
			EnterRule(_localctx, 4, RULE_access_info);
			try {
				State = 252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					_localctx = new Access_nameContext(_localctx);
					EnterOuterAlt(_localctx, 1);
					{
					State = 243; Match(ID);
					State = 244; Match(ARROW);
					State = 245; Match(NAME);
					}
					break;
				case 2:
					_localctx = new Access_textContext(_localctx);
					EnterOuterAlt(_localctx, 2);
					{
					State = 246; Match(ID);
					State = 247; Match(ARROW);
					State = 248; Match(TEXT);
					}
					break;
				case 3:
					_localctx = new Access_valueContext(_localctx);
					EnterOuterAlt(_localctx, 3);
					{
					State = 249; Match(ID);
					State = 250; Match(ARROW);
					State = 251; Match(VALUE);
					}
					break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ValueContext : ParserRuleContext {
			public ValueContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_value; } }
		
			public ValueContext() { }
			public virtual void CopyFrom(ValueContext context) {
				base.CopyFrom(context);
			}
		}
		public partial class CaseStrContext : ValueContext {
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public CaseStrContext(ValueContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterCaseStr(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitCaseStr(this);
			}
		}
		public partial class CaseIdContext : ValueContext {
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public CaseIdContext(ValueContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterCaseId(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitCaseId(this);
			}
		}
		public partial class CaseIntContext : ValueContext {
			public ITerminalNode INT() { return GetToken(xmllangParser.INT, 0); }
			public CaseIntContext(ValueContext context) { CopyFrom(context); }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterCaseInt(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitCaseInt(this);
			}
		}

		[RuleVersion(0)]
		public ValueContext value() {
			ValueContext _localctx = new ValueContext(Context, State);
			EnterRule(_localctx, 6, RULE_value);
			try {
				State = 257;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					_localctx = new CaseIdContext(_localctx);
					EnterOuterAlt(_localctx, 1);
					{
					State = 254; Match(ID);
					}
					break;
				case STRING:
					_localctx = new CaseStrContext(_localctx);
					EnterOuterAlt(_localctx, 2);
					{
					State = 255; Match(STRING);
					}
					break;
				case INT:
					_localctx = new CaseIntContext(_localctx);
					EnterOuterAlt(_localctx, 3);
					{
					State = 256; Match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Case_blockContext : ParserRuleContext {
			public ITerminalNode CASE() { return GetToken(xmllangParser.CASE, 0); }
			public ValueContext value() {
				return GetRuleContext<ValueContext>(0);
			}
			public ITerminalNode COLON() { return GetToken(xmllangParser.COLON, 0); }
			public TaleContext tale() {
				return GetRuleContext<TaleContext>(0);
			}
			public ITerminalNode DEFAULT() { return GetToken(xmllangParser.DEFAULT, 0); }
			public Case_blockContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_case_block; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterCase_block(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitCase_block(this);
			}
		}

		[RuleVersion(0)]
		public Case_blockContext case_block() {
			Case_blockContext _localctx = new Case_blockContext(Context, State);
			EnterRule(_localctx, 8, RULE_case_block);
			try {
				State = 267;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASE:
					EnterOuterAlt(_localctx, 1);
					{
					State = 259; Match(CASE);
					State = 260; value();
					State = 261; Match(COLON);
					State = 262; tale();
					}
					break;
				case DEFAULT:
					EnterOuterAlt(_localctx, 2);
					{
					State = 264; Match(DEFAULT);
					State = 265; Match(COLON);
					State = 266; tale();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Print_statementContext : ParserRuleContext {
			public ITerminalNode PRINT() { return GetToken(xmllangParser.PRINT, 0); }
			public ITerminalNode SPACE() { return GetToken(xmllangParser.SPACE, 0); }
			public Access_infoContext access_info() {
				return GetRuleContext<Access_infoContext>(0);
			}
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Print_statementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_print_statement; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterPrint_statement(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitPrint_statement(this);
			}
		}

		[RuleVersion(0)]
		public Print_statementContext print_statement() {
			Print_statementContext _localctx = new Print_statementContext(Context, State);
			EnterRule(_localctx, 10, RULE_print_statement);
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 269; Match(PRINT);
				State = 270; Match(SPACE);
				State = 271; access_info();
				State = 272; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Begin_forContext : ParserRuleContext {
			public ITerminalNode FOR() { return GetToken(xmllangParser.FOR, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode IN() { return GetToken(xmllangParser.IN, 0); }
			public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Begin_forContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_begin_for; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterBegin_for(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitBegin_for(this);
			}
		}

		[RuleVersion(0)]
		public Begin_forContext begin_for() {
			Begin_forContext _localctx = new Begin_forContext(Context, State);
			EnterRule(_localctx, 12, RULE_begin_for);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 274; Match(SPACE);
					}
					}
					State = 279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 280; Match(FOR);
				State = 281; Match(SPACE);
				State = 282; Match(ID);
				State = 283; Match(SPACE);
				State = 284; Match(IN);
				State = 285; Match(SPACE);
				State = 286; Match(ID);
				State = 287; Match(SPACE);
				State = 288; Match(OPEN_BLOCK);
				State = 289; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EndContext : ParserRuleContext {
			public ITerminalNode CLOSE_BLOCK() { return GetToken(xmllangParser.CLOSE_BLOCK, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public EndContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_end; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterEnd(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitEnd(this);
			}
		}

		[RuleVersion(0)]
		public EndContext end() {
			EndContext _localctx = new EndContext(Context, State);
			EnterRule(_localctx, 14, RULE_end);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 291; Match(SPACE);
					}
					}
					State = 296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 297; Match(CLOSE_BLOCK);
				State = 298; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class DatatypeContext : ParserRuleContext {
			public ITerminalNode TAG() { return GetToken(xmllangParser.TAG, 0); }
			public ITerminalNode ATTR() { return GetToken(xmllangParser.ATTR, 0); }
			public ITerminalNode ARRAY() { return GetToken(xmllangParser.ARRAY, 0); }
			public DatatypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_datatype; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterDatatype(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitDatatype(this);
			}
		}

		[RuleVersion(0)]
		public DatatypeContext datatype() {
			DatatypeContext _localctx = new DatatypeContext(Context, State);
			EnterRule(_localctx, 16, RULE_datatype);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << TAG) | (1L << ATTR) | (1L << ARRAY))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
					Consume();
				}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Function_declContext : ParserRuleContext {
			public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(xmllangParser.ID, i);
			}
			public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
			public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public DatatypeContext[] datatype() {
				return GetRuleContexts<DatatypeContext>();
			}
			public DatatypeContext datatype(int i) {
				return GetRuleContext<DatatypeContext>(i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(xmllangParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(xmllangParser.COMMA, i);
			}
			public Function_declContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_function_decl; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterFunction_decl(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitFunction_decl(this);
			}
		}

		[RuleVersion(0)]
		public Function_declContext function_decl() {
			Function_declContext _localctx = new Function_declContext(Context, State);
			EnterRule(_localctx, 18, RULE_function_decl);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 302; Match(SPACE);
					}
					}
					State = 307;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 308; Match(ID);
				State = 309; Match(OPEN_BRACKET);
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << TAG) | (1L << ATTR) | (1L << ARRAY))) != 0)) {
					{
					{
					State = 310; datatype();
					State = 311; Match(SPACE);
					State = 312; Match(ID);
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 313; Match(COMMA);
						State = 314; Match(SPACE);
						State = 315; datatype();
						State = 316; Match(SPACE);
						State = 317; Match(ID);
						}
						}
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 329; Match(CLOSE_BRACKET);
				State = 330; Match(SPACE);
				State = 331; Match(OPEN_BLOCK);
				State = 332; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Begin_ifContext : ParserRuleContext {
			public ITerminalNode IF() { return GetToken(xmllangParser.IF, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ComparisonContext comparison() {
				return GetRuleContext<ComparisonContext>(0);
			}
			public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Begin_ifContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_begin_if; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterBegin_if(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitBegin_if(this);
			}
		}

		[RuleVersion(0)]
		public Begin_ifContext begin_if() {
			Begin_ifContext _localctx = new Begin_ifContext(Context, State);
			EnterRule(_localctx, 20, RULE_begin_if);
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; Match(IF);
				State = 335; Match(SPACE);
				State = 336; comparison();
				State = 337; Match(SPACE);
				State = 338; Match(OPEN_BLOCK);
				State = 339; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ComparisonContext : ParserRuleContext {
			public Access_infoContext access_info() {
				return GetRuleContext<Access_infoContext>(0);
			}
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
			public ITerminalNode EQ() { return GetToken(xmllangParser.EQ, 0); }
			public ITerminalNode NOT() { return GetToken(xmllangParser.NOT, 0); }
			public ComparisonContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_comparison; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterComparison(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitComparison(this);
			}
		}

		[RuleVersion(0)]
		public ComparisonContext comparison() {
			ComparisonContext _localctx = new ComparisonContext(Context, State);
			EnterRule(_localctx, 22, RULE_comparison);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; access_info();
				State = 342; Match(SPACE);
				State = 343;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
					Consume();
				}
				State = 344; Match(SPACE);
				State = 345; Match(STRING);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Else_thingContext : ParserRuleContext {
			public ITerminalNode CLOSE_BLOCK() { return GetToken(xmllangParser.CLOSE_BLOCK, 0); }
			public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
			public ITerminalNode SPACE(int i) {
				return GetToken(xmllangParser.SPACE, i);
			}
			public ITerminalNode ELSE() { return GetToken(xmllangParser.ELSE, 0); }
			public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public Else_thingContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_else_thing; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterElse_thing(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitElse_thing(this);
			}
		}

		[RuleVersion(0)]
		public Else_thingContext else_thing() {
			Else_thingContext _localctx = new Else_thingContext(Context, State);
			EnterRule(_localctx, 24, RULE_else_thing);
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; Match(CLOSE_BLOCK);
				State = 348; Match(SPACE);
				State = 349; Match(ELSE);
				State = 350; Match(SPACE);
				State = 351; Match(OPEN_BLOCK);
				State = 352; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class CommentContext : ParserRuleContext {
			public ITerminalNode HASHTAG() { return GetToken(xmllangParser.HASHTAG, 0); }
			public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
			public CommentContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_comment; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterComment(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitComment(this);
			}
		}

		[RuleVersion(0)]
		public CommentContext comment() {
			CommentContext _localctx = new CommentContext(Context, State);
			EnterRule(_localctx, 26, RULE_comment);
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
				State = 354; Match(HASHTAG);
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 355;
						MatchWildcard();
						}
						} 
					}
					State = 360;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 361; Match(NEWLINE);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class Switch_statContext : ParserRuleContext {
			public ITerminalNode SWITCH() { return GetToken(xmllangParser.SWITCH, 0); }
			public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
			public ITerminalNode SPACE() { return GetToken(xmllangParser.SPACE, 0); }
			public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
			public ITerminalNode CLOSE_BLOCK() { return GetToken(xmllangParser.CLOSE_BLOCK, 0); }
			public Case_blockContext[] case_block() {
				return GetRuleContexts<Case_blockContext>();
			}
			public Case_blockContext case_block(int i) {
				return GetRuleContext<Case_blockContext>(i);
			}
			public Switch_statContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_switch_stat; } }
			public override void EnterRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.EnterSwitch_stat(this);
			}
			public override void ExitRule(IParseTreeListener listener) {
				IxmllangListener typedListener = listener as IxmllangListener;
				if (typedListener != null) typedListener.ExitSwitch_stat(this);
			}
		}

		[RuleVersion(0)]
		public Switch_statContext switch_stat() {
			Switch_statContext _localctx = new Switch_statContext(Context, State);
			EnterRule(_localctx, 28, RULE_switch_stat);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
				State = 363; Match(SWITCH);
				State = 364; Match(ID);
				State = 365; Match(SPACE);
				State = 366; Match(OPEN_BLOCK);
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 367; case_block();
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CASE || _la==DEFAULT );
				State = 372; Match(CLOSE_BLOCK);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		private static char[] _serializedATN = {
			'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
			'\x5964', '\x3', '.', '\x179', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
			'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
			'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
			'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
			'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
			'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
			'\x2', '\x6', '\x2', '\"', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '#', 
			'\x3', '\x3', '\a', '\x3', '\'', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
			'*', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x34', 
			'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x37', '\v', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\a', '\x3', '\x44', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'G', '\v', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
			'R', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'U', '\v', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '`', '\n', 
			'\x3', '\f', '\x3', '\xE', '\x3', '\x63', '\v', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\a', '\x3', 'l', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'o', 
			'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'x', '\n', '\x3', '\f', 
			'\x3', '\xE', '\x3', '{', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
			'\x84', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x87', '\v', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\a', '\x3', '\x90', '\n', '\x3', '\f', '\x3', '\xE', 
			'\x3', '\x93', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x9C', 
			'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x9F', '\v', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xA6', 
			'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xA9', '\v', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 
			'\xB5', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\xB6', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\xBD', '\n', 
			'\x3', '\r', '\x3', '\xE', '\x3', '\xBE', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\a', '\x3', '\xC9', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
			'\xCC', '\v', '\x3', '\a', '\x3', '\xCE', '\n', '\x3', '\f', '\x3', '\xE', 
			'\x3', '\xD1', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x6', '\x3', '\xD7', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
			'\xD8', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\xDD', '\n', '\x3', 
			'\r', '\x3', '\xE', '\x3', '\xDE', '\x5', '\x3', '\xE1', '\n', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xE6', '\n', '\x3', 
			'\f', '\x3', '\xE', '\x3', '\xE9', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xF4', '\n', '\x3', '\x3', 
			'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
			'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xFF', 
			'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x104', 
			'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
			'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x10E', 
			'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
			'\a', '\x3', '\b', '\a', '\b', '\x116', '\n', '\b', '\f', '\b', '\xE', 
			'\b', '\x119', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
			'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
			'\x3', '\b', '\x3', '\b', '\x3', '\t', '\a', '\t', '\x127', '\n', '\t', 
			'\f', '\t', '\xE', '\t', '\x12A', '\v', '\t', '\x3', '\t', '\x3', '\t', 
			'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\a', '\v', '\x132', 
			'\n', '\v', '\f', '\v', '\xE', '\v', '\x135', '\v', '\v', '\x3', '\v', 
			'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
			'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
			'\x142', '\n', '\v', '\f', '\v', '\xE', '\v', '\x145', '\v', '\v', '\a', 
			'\v', '\x147', '\n', '\v', '\f', '\v', '\xE', '\v', '\x14A', '\v', '\v', 
			'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
			'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
			'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
			'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
			'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
			'\a', '\xF', '\x167', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x16A', 
			'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
			'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x173', '\n', 
			'\x10', '\r', '\x10', '\xE', '\x10', '\x174', '\x3', '\x10', '\x3', '\x10', 
			'\x3', '\x10', '\x3', '\x168', '\x2', '\x11', '\x2', '\x4', '\x6', '\b', 
			'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
			'\x1E', '\x2', '\x4', '\x6', '\x2', '\x3', '\x3', '\a', '\a', '\t', '\t', 
			'\x12', '\x12', '\x3', '\x2', '\x1C', '\x1D', '\x2', '\x19A', '\x2', '!', 
			'\x3', '\x2', '\x2', '\x2', '\x4', '\xF3', '\x3', '\x2', '\x2', '\x2', 
			'\x6', '\xFE', '\x3', '\x2', '\x2', '\x2', '\b', '\x103', '\x3', '\x2', 
			'\x2', '\x2', '\n', '\x10D', '\x3', '\x2', '\x2', '\x2', '\f', '\x10F', 
			'\x3', '\x2', '\x2', '\x2', '\xE', '\x117', '\x3', '\x2', '\x2', '\x2', 
			'\x10', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12', '\x12E', '\x3', '\x2', 
			'\x2', '\x2', '\x14', '\x133', '\x3', '\x2', '\x2', '\x2', '\x16', '\x150', 
			'\x3', '\x2', '\x2', '\x2', '\x18', '\x157', '\x3', '\x2', '\x2', '\x2', 
			'\x1A', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x164', '\x3', '\x2', 
			'\x2', '\x2', '\x1E', '\x16D', '\x3', '\x2', '\x2', '\x2', ' ', '\"', 
			'\x5', '\x4', '\x3', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', 
			'#', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
			'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\x3', '\x3', '\x2', '\x2', 
			'\x2', '%', '\'', '\a', '(', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', 
			'\x2', '\'', '*', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', 
			'\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x3', '\x2', 
			'\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\a', 
			'\x2', '\x2', ',', '-', '\a', '(', '\x2', '\x2', '-', '.', '\a', '\x17', 
			'\x2', '\x2', '.', '/', '\a', '&', '\x2', '\x2', '/', '\x30', '\a', '\x19', 
			'\x2', '\x2', '\x30', '\x31', '\a', '\'', '\x2', '\x2', '\x31', '\xF4', 
			'\a', '\x1A', '\x2', '\x2', '\x32', '\x34', '\a', '(', '\x2', '\x2', '\x33', 
			'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', 
			'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
			'\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', 
			'\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\t', '\x2', 
			'\x2', '\x39', ':', '\a', '(', '\x2', '\x2', ':', ';', '\a', '\x17', '\x2', 
			'\x2', ';', '<', '\a', '&', '\x2', '\x2', '<', '=', '\a', '\x19', '\x2', 
			'\x2', '=', '>', '\a', ')', '\x2', '\x2', '>', '?', '\a', '(', '\x2', 
			'\x2', '?', '@', '\a', '\x19', '\x2', '\x2', '@', '\x41', '\a', '\'', 
			'\x2', '\x2', '\x41', '\xF4', '\a', '\x1A', '\x2', '\x2', '\x42', '\x44', 
			'\a', '(', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 
			'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
			'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x3', 
			'\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
			'\a', '\xE', '\x2', '\x2', 'I', 'J', '\a', '&', '\x2', '\x2', 'J', 'K', 
			'\a', '\x17', '\x2', '\x2', 'K', 'L', '\a', ')', '\x2', '\x2', 'L', 'M', 
			'\a', '(', '\x2', '\x2', 'M', 'N', '\a', '\x19', '\x2', '\x2', 'N', 'O', 
			'\a', '\'', '\x2', '\x2', 'O', '\xF4', '\a', '\x1A', '\x2', '\x2', 'P', 
			'R', '\a', '(', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 
			'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
			'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
			'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x11', '\x2', '\x2', 
			'W', 'X', '\a', '&', '\x2', '\x2', 'X', 'Y', '\a', '\x17', '\x2', '\x2', 
			'Y', 'Z', '\a', ')', '\x2', '\x2', 'Z', '[', '\a', '(', '\x2', '\x2', 
			'[', '\\', '\a', '\x19', '\x2', '\x2', '\\', ']', '\a', '\'', '\x2', '\x2', 
			']', '\xF4', '\a', '\x1A', '\x2', '\x2', '^', '`', '\a', '(', '\x2', '\x2', 
			'_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', 
			'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
			'\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', '\x63', 
			'\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x17', '\x2', 
			'\x2', '\x65', '\x66', '\a', '(', '\x2', '\x2', '\x66', 'g', '\a', '\x1B', 
			'\x2', '\x2', 'g', 'h', '\a', '(', '\x2', '\x2', 'h', 'i', '\a', '\x19', 
			'\x2', '\x2', 'i', '\xF4', '\a', '\x1A', '\x2', '\x2', 'j', 'l', '\a', 
			'(', '\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', 
			'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
			'\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', 
			'\x2', '\x2', '\x2', 'p', 'q', '\a', '\x17', '\x2', '\x2', 'q', 'r', '\a', 
			'(', '\x2', '\x2', 'r', 's', '\a', '\x1F', '\x2', '\x2', 's', 't', '\a', 
			'(', '\x2', '\x2', 't', 'u', '\a', '\x17', '\x2', '\x2', 'u', '\xF4', 
			'\a', '\x1A', '\x2', '\x2', 'v', 'x', '\a', '(', '\x2', '\x2', 'w', 'v', 
			'\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 
			'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
			'z', '|', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', 
			'|', '}', '\a', '\x17', '\x2', '\x2', '}', '~', '\a', '(', '\x2', '\x2', 
			'~', '\x7F', '\a', '\x1E', '\x2', '\x2', '\x7F', '\x80', '\a', '(', '\x2', 
			'\x2', '\x80', '\x81', '\a', '\x17', '\x2', '\x2', '\x81', '\xF4', '\a', 
			'\x1A', '\x2', '\x2', '\x82', '\x84', '\a', '(', '\x2', '\x2', '\x83', 
			'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', '\x2', 
			'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', 
			'\x2', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', 
			'\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x17', '\x2', 
			'\x2', '\x89', '\x8A', '\a', '(', '\x2', '\x2', '\x8A', '\x8B', '\a', 
			'!', '\x2', '\x2', '\x8B', '\x8C', '\a', '(', '\x2', '\x2', '\x8C', '\x8D', 
			'\a', '\x17', '\x2', '\x2', '\x8D', '\xF4', '\a', '\x1A', '\x2', '\x2', 
			'\x8E', '\x90', '\a', '(', '\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', 
			'\x2', '\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', 
			'\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', 
			'\x92', '\x94', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', 
			'\x2', '\x2', '\x94', '\x95', '\a', '\x17', '\x2', '\x2', '\x95', '\x96', 
			'\a', '(', '\x2', '\x2', '\x96', '\x97', '\a', ' ', '\x2', '\x2', '\x97', 
			'\x98', '\a', '(', '\x2', '\x2', '\x98', '\x99', '\a', '\x17', '\x2', 
			'\x2', '\x99', '\xF4', '\a', '\x1A', '\x2', '\x2', '\x9A', '\x9C', '\a', 
			'(', '\x2', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', 
			'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
			'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x3', 
			'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', 
			'\xA1', '\a', '\x12', '\x2', '\x2', '\xA1', '\xA2', '\a', '(', '\x2', 
			'\x2', '\xA2', '\xA3', '\a', '\x17', '\x2', '\x2', '\xA3', '\xF4', '\a', 
			'\x1A', '\x2', '\x2', '\xA4', '\xA6', '\a', '(', '\x2', '\x2', '\xA5', 
			'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', 
			'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', 
			'\x2', '\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', 
			'\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x17', '\x2', 
			'\x2', '\xAB', '\xAC', '\a', '(', '\x2', '\x2', '\xAC', '\xAD', '\a', 
			'\x1B', '\x2', '\x2', '\xAD', '\xAE', '\a', '(', '\x2', '\x2', '\xAE', 
			'\xAF', '\a', '\x17', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x16', '\x2', 
			'\x2', '\xB0', '\xB1', '\a', '\x17', '\x2', '\x2', '\xB1', '\xF4', '\a', 
			'\x1A', '\x2', '\x2', '\xB2', '\xB4', '\x5', '\xE', '\b', '\x2', '\xB3', 
			'\xB5', '\x5', '\x4', '\x3', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', 
			'\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
			'\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', 
			'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x10', '\t', 
			'\x2', '\xB9', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBC', '\x5', 
			'\x14', '\v', '\x2', '\xBB', '\xBD', '\x5', '\x4', '\x3', '\x2', '\xBC', 
			'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', 
			'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', 
			'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', 
			'\xC1', '\x5', '\x10', '\t', '\x2', '\xC1', '\xF4', '\x3', '\x2', '\x2', 
			'\x2', '\xC2', '\xC3', '\a', '\x17', '\x2', '\x2', '\xC3', '\xCF', '\a', 
			'&', '\x2', '\x2', '\xC4', '\xCA', '\a', '\x17', '\x2', '\x2', '\xC5', 
			'\xC6', '\a', ')', '\x2', '\x2', '\xC6', '\xC7', '\a', '(', '\x2', '\x2', 
			'\xC7', '\xC9', '\a', '\x17', '\x2', '\x2', '\xC8', '\xC5', '\x3', '\x2', 
			'\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', 
			'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', 
			'\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', 
			'\x2', '\x2', '\xCD', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD1', 
			'\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
			'\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', '\x2', 
			'\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', 
			'\a', '\'', '\x2', '\x2', '\xD3', '\xF4', '\a', '\x1A', '\x2', '\x2', 
			'\xD4', '\xD6', '\x5', '\x16', '\f', '\x2', '\xD5', '\xD7', '\x5', '\x4', 
			'\x3', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', 
			'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', 
			'\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xE0', '\x3', '\x2', 
			'\x2', '\x2', '\xDA', '\xDC', '\x5', '\x1A', '\xE', '\x2', '\xDB', '\xDD', 
			'\x5', '\x4', '\x3', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', 
			'\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', 
			'\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE1', 
			'\x3', '\x2', '\x2', '\x2', '\xE0', '\xDA', '\x3', '\x2', '\x2', '\x2', 
			'\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', 
			'\x2', '\x2', '\xE2', '\xE3', '\x5', '\x10', '\t', '\x2', '\xE3', '\xF4', 
			'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\a', '(', '\x2', '\x2', '\xE5', 
			'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', '\x2', '\x2', 
			'\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', 
			'\x2', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', 
			'\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x5', '\x6', '\x4', 
			'\x2', '\xEB', '\xEC', '\a', '(', '\x2', '\x2', '\xEC', '\xED', '\a', 
			'\x1B', '\x2', '\x2', '\xED', '\xEE', '\a', '(', '\x2', '\x2', '\xEE', 
			'\xEF', '\a', '\x19', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x1A', '\x2', 
			'\x2', '\xF0', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x5', 
			'\x1C', '\xF', '\x2', '\xF2', '\xF4', '\x5', '\f', '\a', '\x2', '\xF3', 
			'(', '\x3', '\x2', '\x2', '\x2', '\xF3', '\x35', '\x3', '\x2', '\x2', 
			'\x2', '\xF3', '\x45', '\x3', '\x2', '\x2', '\x2', '\xF3', 'S', '\x3', 
			'\x2', '\x2', '\x2', '\xF3', '\x61', '\x3', '\x2', '\x2', '\x2', '\xF3', 
			'm', '\x3', '\x2', '\x2', '\x2', '\xF3', 'y', '\x3', '\x2', '\x2', '\x2', 
			'\xF3', '\x85', '\x3', '\x2', '\x2', '\x2', '\xF3', '\x91', '\x3', '\x2', 
			'\x2', '\x2', '\xF3', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xA7', 
			'\x3', '\x2', '\x2', '\x2', '\xF3', '\xB2', '\x3', '\x2', '\x2', '\x2', 
			'\xF3', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xC2', '\x3', '\x2', 
			'\x2', '\x2', '\xF3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE7', 
			'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', 
			'\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x5', '\x3', '\x2', 
			'\x2', '\x2', '\xF5', '\xF6', '\a', '\x17', '\x2', '\x2', '\xF6', '\xF7', 
			'\a', '*', '\x2', '\x2', '\xF7', '\xFF', '\a', '\n', '\x2', '\x2', '\xF8', 
			'\xF9', '\a', '\x17', '\x2', '\x2', '\xF9', '\xFA', '\a', '*', '\x2', 
			'\x2', '\xFA', '\xFF', '\a', '\v', '\x2', '\x2', '\xFB', '\xFC', '\a', 
			'\x17', '\x2', '\x2', '\xFC', '\xFD', '\a', '*', '\x2', '\x2', '\xFD', 
			'\xFF', '\a', '\x10', '\x2', '\x2', '\xFE', '\xF5', '\x3', '\x2', '\x2', 
			'\x2', '\xFE', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFB', '\x3', 
			'\x2', '\x2', '\x2', '\xFF', '\a', '\x3', '\x2', '\x2', '\x2', '\x100', 
			'\x104', '\a', '\x17', '\x2', '\x2', '\x101', '\x104', '\a', '\x19', '\x2', 
			'\x2', '\x102', '\x104', '\a', '#', '\x2', '\x2', '\x103', '\x100', '\x3', 
			'\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', 
			'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\t', '\x3', '\x2', '\x2', 
			'\x2', '\x105', '\x106', '\a', '\x14', '\x2', '\x2', '\x106', '\x107', 
			'\x5', '\b', '\x5', '\x2', '\x107', '\x108', '\a', '%', '\x2', '\x2', 
			'\x108', '\x109', '\x5', '\x2', '\x2', '\x2', '\x109', '\x10E', '\x3', 
			'\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', '\x15', '\x2', '\x2', '\x10B', 
			'\x10C', '\a', '%', '\x2', '\x2', '\x10C', '\x10E', '\x5', '\x2', '\x2', 
			'\x2', '\x10D', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10A', 
			'\x3', '\x2', '\x2', '\x2', '\x10E', '\v', '\x3', '\x2', '\x2', '\x2', 
			'\x10F', '\x110', '\a', '\xF', '\x2', '\x2', '\x110', '\x111', '\a', '(', 
			'\x2', '\x2', '\x111', '\x112', '\x5', '\x6', '\x4', '\x2', '\x112', '\x113', 
			'\a', '\x1A', '\x2', '\x2', '\x113', '\r', '\x3', '\x2', '\x2', '\x2', 
			'\x114', '\x116', '\a', '(', '\x2', '\x2', '\x115', '\x114', '\x3', '\x2', 
			'\x2', '\x2', '\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', 
			'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', 
			'\x118', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', 
			'\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', '\x4', '\x2', '\x2', '\x11B', 
			'\x11C', '\a', '(', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x17', '\x2', 
			'\x2', '\x11D', '\x11E', '\a', '(', '\x2', '\x2', '\x11E', '\x11F', '\a', 
			'\x6', '\x2', '\x2', '\x11F', '\x120', '\a', '(', '\x2', '\x2', '\x120', 
			'\x121', '\a', '\x17', '\x2', '\x2', '\x121', '\x122', '\a', '(', '\x2', 
			'\x2', '\x122', '\x123', '\a', ',', '\x2', '\x2', '\x123', '\x124', '\a', 
			'\x1A', '\x2', '\x2', '\x124', '\xF', '\x3', '\x2', '\x2', '\x2', '\x125', 
			'\x127', '\a', '(', '\x2', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', 
			'\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', 
			'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', 
			'\x129', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', 
			'\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '-', '\x2', '\x2', '\x12C', 
			'\x12D', '\a', '\x1A', '\x2', '\x2', '\x12D', '\x11', '\x3', '\x2', '\x2', 
			'\x2', '\x12E', '\x12F', '\t', '\x2', '\x2', '\x2', '\x12F', '\x13', '\x3', 
			'\x2', '\x2', '\x2', '\x130', '\x132', '\a', '(', '\x2', '\x2', '\x131', 
			'\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', '\x3', '\x2', '\x2', 
			'\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', 
			'\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\x3', '\x2', '\x2', '\x2', 
			'\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\a', 
			'\x17', '\x2', '\x2', '\x137', '\x148', '\a', '&', '\x2', '\x2', '\x138', 
			'\x139', '\x5', '\x12', '\n', '\x2', '\x139', '\x13A', '\a', '(', '\x2', 
			'\x2', '\x13A', '\x143', '\a', '\x17', '\x2', '\x2', '\x13B', '\x13C', 
			'\a', ')', '\x2', '\x2', '\x13C', '\x13D', '\a', '(', '\x2', '\x2', '\x13D', 
			'\x13E', '\x5', '\x12', '\n', '\x2', '\x13E', '\x13F', '\a', '(', '\x2', 
			'\x2', '\x13F', '\x140', '\a', '\x17', '\x2', '\x2', '\x140', '\x142', 
			'\x3', '\x2', '\x2', '\x2', '\x141', '\x13B', '\x3', '\x2', '\x2', '\x2', 
			'\x142', '\x145', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', 
			'\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', 
			'\x147', '\x3', '\x2', '\x2', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', 
			'\x2', '\x146', '\x138', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', 
			'\x3', '\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', 
			'\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14B', '\x3', 
			'\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', 
			'\x14C', '\a', '\'', '\x2', '\x2', '\x14C', '\x14D', '\a', '(', '\x2', 
			'\x2', '\x14D', '\x14E', '\a', ',', '\x2', '\x2', '\x14E', '\x14F', '\a', 
			'\x1A', '\x2', '\x2', '\x14F', '\x15', '\x3', '\x2', '\x2', '\x2', '\x150', 
			'\x151', '\a', '\x5', '\x2', '\x2', '\x151', '\x152', '\a', '(', '\x2', 
			'\x2', '\x152', '\x153', '\x5', '\x18', '\r', '\x2', '\x153', '\x154', 
			'\a', '(', '\x2', '\x2', '\x154', '\x155', '\a', ',', '\x2', '\x2', '\x155', 
			'\x156', '\a', '\x1A', '\x2', '\x2', '\x156', '\x17', '\x3', '\x2', '\x2', 
			'\x2', '\x157', '\x158', '\x5', '\x6', '\x4', '\x2', '\x158', '\x159', 
			'\a', '(', '\x2', '\x2', '\x159', '\x15A', '\t', '\x3', '\x2', '\x2', 
			'\x15A', '\x15B', '\a', '(', '\x2', '\x2', '\x15B', '\x15C', '\a', '\x19', 
			'\x2', '\x2', '\x15C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
			'\a', '-', '\x2', '\x2', '\x15E', '\x15F', '\a', '(', '\x2', '\x2', '\x15F', 
			'\x160', '\a', '\b', '\x2', '\x2', '\x160', '\x161', '\a', '(', '\x2', 
			'\x2', '\x161', '\x162', '\a', ',', '\x2', '\x2', '\x162', '\x163', '\a', 
			'\x1A', '\x2', '\x2', '\x163', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x164', 
			'\x168', '\a', '.', '\x2', '\x2', '\x165', '\x167', '\v', '\x2', '\x2', 
			'\x2', '\x166', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16A', 
			'\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', 
			'\x168', '\x166', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16B', '\x3', 
			'\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', 
			'\x16C', '\a', '\x1A', '\x2', '\x2', '\x16C', '\x1D', '\x3', '\x2', '\x2', 
			'\x2', '\x16D', '\x16E', '\a', '\x13', '\x2', '\x2', '\x16E', '\x16F', 
			'\a', '\x17', '\x2', '\x2', '\x16F', '\x170', '\a', '(', '\x2', '\x2', 
			'\x170', '\x172', '\a', ',', '\x2', '\x2', '\x171', '\x173', '\x5', '\n', 
			'\x6', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', 
			'\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', '\x2', '\x2', '\x2', 
			'\x174', '\x175', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', 
			'\x2', '\x2', '\x2', '\x176', '\x177', '\a', '-', '\x2', '\x2', '\x177', 
			'\x1F', '\x3', '\x2', '\x2', '\x2', '!', '#', '(', '\x35', '\x45', 'S', 
			'\x61', 'm', 'y', '\x85', '\x91', '\x9D', '\xA7', '\xB6', '\xBE', '\xCA', 
			'\xCF', '\xD8', '\xDE', '\xE0', '\xE7', '\xF3', '\xFE', '\x103', '\x10D', 
			'\x117', '\x128', '\x133', '\x143', '\x148', '\x168', '\x174',
		};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);
	}
}
