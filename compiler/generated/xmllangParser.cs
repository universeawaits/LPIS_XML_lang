//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\User\source\repos\xmllang\xmllang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace xmllang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class xmllangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, FOR=3, IF=4, IN=5, TAG=6, ELSE=7, ATTR=8, NAME=9, TEXT=10, 
		NODES=11, ATTRS=12, GEN=13, PRINT=14, VALUE=15, PARSE=16, ARRAY=17, SWITCH=18, 
		CASE=19, DEFAULT=20, AT=21, ID=22, FILENAME=23, STRING=24, NEWLINE=25, 
		ASSIGN=26, EQ=27, NOT=28, APPEND_ATTR=29, APPEND_CHILD=30, REMOVE_ATTR=31, 
		REMOVE_CHILD=32, ROOT=33, INT=34, QT=35, COLON=36, OPEN_BRACKET=37, CLOSE_BRACKET=38, 
		SPACE=39, COMMA=40, ARROW=41, DOT=42, OPEN_BLOCK=43, CLOSE_BLOCK=44;
	public const int
		RULE_tale = 0, RULE_function_declaration = 1, RULE_empty_stat = 2, RULE_statement = 3, 
		RULE_access_info = 4, RULE_primitive_value = 5, RULE_value = 6, RULE_case_block = 7, 
		RULE_print_statement = 8, RULE_begin_for = 9, RULE_end = 10, RULE_datatype = 11, 
		RULE_primitive = 12, RULE_function_decl = 13, RULE_function_args = 14, 
		RULE_begin_if = 15, RULE_comparison = 16, RULE_else_thing = 17, RULE_switch_stat = 18;
	public static readonly string[] ruleNames = {
		"tale", "function_declaration", "empty_stat", "statement", "access_info", 
		"primitive_value", "value", "case_block", "print_statement", "begin_for", 
		"end", "datatype", "primitive", "function_decl", "function_args", "begin_if", 
		"comparison", "else_thing", "switch_stat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'string'", "'for each'", "'if'", "'in'", "'node'", "'else'", 
		"'attr'", "'name'", "'text'", "'nodes'", "'attrs'", "'generate'", "'print'", 
		"'value'", "'parse'", "'array'", "'switch'", "'case'", "'default'", "'@'", 
		null, null, null, null, "'='", "'=='", "'!='", "'adds attr'", "'adds child'", 
		"'removes attr'", "'removes child'", "'!'", null, "'\"'", "':'", "'('", 
		"')'", null, "','", "'->'", "'.'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "FOR", "IF", "IN", "TAG", "ELSE", "ATTR", "NAME", "TEXT", 
		"NODES", "ATTRS", "GEN", "PRINT", "VALUE", "PARSE", "ARRAY", "SWITCH", 
		"CASE", "DEFAULT", "AT", "ID", "FILENAME", "STRING", "NEWLINE", "ASSIGN", 
		"EQ", "NOT", "APPEND_ATTR", "APPEND_CHILD", "REMOVE_ATTR", "REMOVE_CHILD", 
		"ROOT", "INT", "QT", "COLON", "OPEN_BRACKET", "CLOSE_BRACKET", "SPACE", 
		"COMMA", "ARROW", "DOT", "OPEN_BLOCK", "CLOSE_BLOCK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "xmllang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static xmllangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public xmllangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public xmllangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TaleContext : ParserRuleContext {
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public TaleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tale; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterTale(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitTale(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTale(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaleContext tale() {
		TaleContext _localctx = new TaleContext(Context, State);
		EnterRule(_localctx, 0, RULE_tale);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 38; function_declaration();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID || _la==SPACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_declContext function_decl() {
			return GetRuleContext<Function_declContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Empty_statContext[] empty_stat() {
			return GetRuleContexts<Empty_statContext>();
		}
		public Empty_statContext empty_stat(int i) {
			return GetRuleContext<Empty_statContext>(i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_function_declaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; function_decl();
			State = 45;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 44; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 49; end();
			State = 53;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 50; empty_stat();
					}
					} 
				}
				State = 55;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public ITerminalNode SPACE() { return GetToken(xmllangParser.SPACE, 0); }
		public Empty_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterEmpty_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitEmpty_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statContext empty_stat() {
		Empty_statContext _localctx = new Empty_statContext(Context, State);
		EnterRule(_localctx, 4, RULE_empty_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.LA(1);
			if ( !(_la==NEWLINE || _la==SPACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Assign_new_valueContext : StatementContext {
		public Access_infoContext access_info() {
			return GetRuleContext<Access_infoContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(xmllangParser.ASSIGN, 0); }
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Assign_new_valueContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAssign_new_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAssign_new_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_new_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Gen_fileContext : StatementContext {
		public ITerminalNode GEN() { return GetToken(xmllangParser.GEN, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(xmllangParser.COMMA, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Gen_fileContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterGen_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitGen_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGen_file(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_cycleContext : StatementContext {
		public Begin_forContext begin_for() {
			return GetRuleContext<Begin_forContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public For_cycleContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterFor_cycle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitFor_cycle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_cycle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Function_callContext : StatementContext {
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(xmllangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(xmllangParser.COMMA, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public Function_callContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Declare_arrayContext : StatementContext {
		public ITerminalNode ARRAY() { return GetToken(xmllangParser.ARRAY, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Declare_arrayContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterDeclare_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitDeclare_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_array(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class If_declarationContext : StatementContext {
		public Begin_ifContext begin_if() {
			return GetRuleContext<Begin_ifContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_thingContext else_thing() {
			return GetRuleContext<Else_thingContext>(0);
		}
		public If_declarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterIf_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitIf_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Parse_fileContext : StatementContext {
		public ITerminalNode PARSE() { return GetToken(xmllangParser.PARSE, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(xmllangParser.COMMA, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Parse_fileContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterParse_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitParse_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse_file(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintContext : StatementContext {
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public PrintContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Append_tagContext : StatementContext {
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode APPEND_CHILD() { return GetToken(xmllangParser.APPEND_CHILD, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Append_tagContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAppend_tag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAppend_tag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppend_tag(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primitive_assignmentContext : StatementContext {
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(xmllangParser.ASSIGN, 0); }
		public Primitive_valueContext primitive_value() {
			return GetRuleContext<Primitive_valueContext>(0);
		}
		public Primitive_assignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterPrimitive_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitPrimitive_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tag_assignmentContext : StatementContext {
		public ITerminalNode TAG() { return GetToken(xmllangParser.TAG, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Tag_assignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterTag_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitTag_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Append_atrContext : StatementContext {
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode APPEND_ATTR() { return GetToken(xmllangParser.APPEND_ATTR, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Append_atrContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAppend_atr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAppend_atr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppend_atr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remove_atrContext : StatementContext {
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode REMOVE_ATTR() { return GetToken(xmllangParser.REMOVE_ATTR, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Remove_atrContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterRemove_atr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitRemove_atr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_atr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Attr_assignmentContext : StatementContext {
		public ITerminalNode ATTR() { return GetToken(xmllangParser.ATTR, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(xmllangParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(xmllangParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(xmllangParser.COMMA, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Attr_assignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAttr_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAttr_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EstatContext : StatementContext {
		public Empty_statContext empty_stat() {
			return GetRuleContext<Empty_statContext>(0);
		}
		public EstatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterEstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitEstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEstat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_textContext : StatementContext {
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(xmllangParser.ASSIGN, 0); }
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Add_textContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAdd_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAdd_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_text(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remove_tagContext : StatementContext {
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode REMOVE_CHILD() { return GetToken(xmllangParser.REMOVE_CHILD, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Remove_tagContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterRemove_tag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitRemove_tag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new Tag_assignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 58; Match(SPACE);
					}
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 64; Match(TAG);
				State = 65; Match(SPACE);
				State = 66; Match(ID);
				State = 67; Match(OPEN_BRACKET);
				State = 68; Match(STRING);
				State = 69; Match(CLOSE_BRACKET);
				State = 70; Match(NEWLINE);
				}
				break;
			case 2:
				_localctx = new Attr_assignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 71; Match(SPACE);
					}
					}
					State = 76;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 77; Match(ATTR);
				State = 78; Match(SPACE);
				State = 79; Match(ID);
				State = 80; Match(OPEN_BRACKET);
				State = 81; Match(STRING);
				State = 82; Match(COMMA);
				State = 83; Match(SPACE);
				State = 84; Match(STRING);
				State = 85; Match(CLOSE_BRACKET);
				State = 86; Match(NEWLINE);
				}
				break;
			case 3:
				_localctx = new Primitive_assignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 87; Match(SPACE);
					}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 93; primitive();
				State = 94; Match(SPACE);
				State = 95; Match(ID);
				State = 96; Match(SPACE);
				State = 97; Match(ASSIGN);
				State = 98; Match(SPACE);
				State = 99; primitive_value();
				}
				break;
			case 4:
				_localctx = new Gen_fileContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 101; Match(SPACE);
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 107; Match(GEN);
				State = 108; Match(OPEN_BRACKET);
				State = 109; Match(ID);
				State = 110; Match(COMMA);
				State = 111; Match(SPACE);
				State = 112; Match(STRING);
				State = 113; Match(CLOSE_BRACKET);
				State = 114; Match(NEWLINE);
				}
				break;
			case 5:
				_localctx = new Parse_fileContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 115; Match(SPACE);
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121; Match(PARSE);
				State = 122; Match(OPEN_BRACKET);
				State = 123; Match(ID);
				State = 124; Match(COMMA);
				State = 125; Match(SPACE);
				State = 126; Match(STRING);
				State = 127; Match(CLOSE_BRACKET);
				State = 128; Match(NEWLINE);
				}
				break;
			case 6:
				_localctx = new Add_textContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 129; Match(SPACE);
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 135; Match(ID);
				State = 136; Match(SPACE);
				State = 137; Match(ASSIGN);
				State = 138; Match(SPACE);
				State = 139; Match(STRING);
				State = 140; Match(NEWLINE);
				}
				break;
			case 7:
				_localctx = new Append_tagContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 141; Match(SPACE);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 147; Match(ID);
				State = 148; Match(SPACE);
				State = 149; Match(APPEND_CHILD);
				State = 150; Match(SPACE);
				State = 151; Match(ID);
				State = 152; Match(NEWLINE);
				}
				break;
			case 8:
				_localctx = new Append_atrContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 153; Match(SPACE);
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 159; Match(ID);
				State = 160; Match(SPACE);
				State = 161; Match(APPEND_ATTR);
				State = 162; Match(SPACE);
				State = 163; Match(ID);
				State = 164; Match(NEWLINE);
				}
				break;
			case 9:
				_localctx = new Remove_tagContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 165; Match(SPACE);
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171; Match(ID);
				State = 172; Match(SPACE);
				State = 173; Match(REMOVE_CHILD);
				State = 174; Match(SPACE);
				State = 175; Match(ID);
				State = 176; Match(NEWLINE);
				}
				break;
			case 10:
				_localctx = new Remove_atrContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 177; Match(SPACE);
					}
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 183; Match(ID);
				State = 184; Match(SPACE);
				State = 185; Match(REMOVE_ATTR);
				State = 186; Match(SPACE);
				State = 187; Match(ID);
				State = 188; Match(NEWLINE);
				}
				break;
			case 11:
				_localctx = new Declare_arrayContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 189; Match(SPACE);
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195; Match(ARRAY);
				State = 196; Match(SPACE);
				State = 197; Match(ID);
				State = 198; Match(NEWLINE);
				}
				break;
			case 12:
				_localctx = new For_cycleContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 199; begin_for();
				State = 201;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 200; statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 203;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 205; end();
				}
				break;
			case 13:
				_localctx = new Function_callContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 207; Match(ID);
				State = 208; Match(OPEN_BRACKET);
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 209; Match(ID);
					State = 215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 210; Match(COMMA);
						State = 211; Match(SPACE);
						State = 212; Match(ID);
						}
						}
						State = 217;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 223; Match(CLOSE_BRACKET);
				State = 224; Match(NEWLINE);
				}
				break;
			case 14:
				_localctx = new If_declarationContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 225; begin_if();
				State = 227;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 226; statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 229;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 231; else_thing();
					State = 233;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 232; statement();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 235;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				State = 239; end();
				}
				break;
			case 15:
				_localctx = new Assign_new_valueContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SPACE) {
					{
					{
					State = 241; Match(SPACE);
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 247; access_info();
				State = 248; Match(SPACE);
				State = 249; Match(ASSIGN);
				State = 250; Match(SPACE);
				State = 251; Match(STRING);
				State = 252; Match(NEWLINE);
				}
				break;
			case 16:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 254; print_statement();
				}
				break;
			case 17:
				_localctx = new EstatContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 255; empty_stat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_infoContext : ParserRuleContext {
		public Access_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_info; } }
	 
		public Access_infoContext() { }
		public virtual void CopyFrom(Access_infoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Access_nameContext : Access_infoContext {
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode ARROW() { return GetToken(xmllangParser.ARROW, 0); }
		public ITerminalNode NAME() { return GetToken(xmllangParser.NAME, 0); }
		public Access_nameContext(Access_infoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAccess_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAccess_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Access_valueContext : Access_infoContext {
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode ARROW() { return GetToken(xmllangParser.ARROW, 0); }
		public ITerminalNode VALUE() { return GetToken(xmllangParser.VALUE, 0); }
		public Access_valueContext(Access_infoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAccess_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAccess_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Access_textContext : Access_infoContext {
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode ARROW() { return GetToken(xmllangParser.ARROW, 0); }
		public ITerminalNode TEXT() { return GetToken(xmllangParser.TEXT, 0); }
		public Access_textContext(Access_infoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterAccess_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitAccess_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_infoContext access_info() {
		Access_infoContext _localctx = new Access_infoContext(Context, State);
		EnterRule(_localctx, 8, RULE_access_info);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new Access_nameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; Match(ID);
				State = 259; Match(ARROW);
				State = 260; Match(NAME);
				}
				break;
			case 2:
				_localctx = new Access_textContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; Match(ID);
				State = 262; Match(ARROW);
				State = 263; Match(TEXT);
				}
				break;
			case 3:
				_localctx = new Access_valueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 264; Match(ID);
				State = 265; Match(ARROW);
				State = 266; Match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_valueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(xmllangParser.INT, 0); }
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public Primitive_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterPrimitive_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitPrimitive_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_valueContext primitive_value() {
		Primitive_valueContext _localctx = new Primitive_valueContext(Context, State);
		EnterRule(_localctx, 10, RULE_primitive_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseStrContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public CaseStrContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterCaseStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitCaseStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseIdContext : ValueContext {
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public CaseIdContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterCaseId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitCaseId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseIntContext : ValueContext {
		public ITerminalNode INT() { return GetToken(xmllangParser.INT, 0); }
		public CaseIntContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterCaseInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitCaseInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new CaseIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; Match(ID);
				}
				break;
			case STRING:
				_localctx = new CaseStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; Match(STRING);
				}
				break;
			case INT:
				_localctx = new CaseIntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 273; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_blockContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(xmllangParser.CASE, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(xmllangParser.COLON, 0); }
		public TaleContext tale() {
			return GetRuleContext<TaleContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(xmllangParser.DEFAULT, 0); }
		public Case_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterCase_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitCase_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_blockContext case_block() {
		Case_blockContext _localctx = new Case_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_case_block);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; Match(CASE);
				State = 277; value();
				State = 278; Match(COLON);
				State = 279; tale();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; Match(DEFAULT);
				State = 282; Match(COLON);
				State = 283; tale();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(xmllangParser.PRINT, 0); }
		public ITerminalNode SPACE() { return GetToken(xmllangParser.SPACE, 0); }
		public Access_infoContext access_info() {
			return GetRuleContext<Access_infoContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_print_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(PRINT);
			State = 287; Match(SPACE);
			State = 288; access_info();
			State = 289; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_forContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(xmllangParser.FOR, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode IN() { return GetToken(xmllangParser.IN, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Begin_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterBegin_for(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitBegin_for(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_forContext begin_for() {
		Begin_forContext _localctx = new Begin_forContext(Context, State);
		EnterRule(_localctx, 18, RULE_begin_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 291; Match(SPACE);
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 297; Match(FOR);
			State = 298; Match(SPACE);
			State = 299; Match(ID);
			State = 300; Match(SPACE);
			State = 301; Match(IN);
			State = 302; Match(SPACE);
			State = 303; Match(ID);
			State = 304; Match(SPACE);
			State = 305; Match(OPEN_BLOCK);
			State = 306; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode CLOSE_BLOCK() { return GetToken(xmllangParser.CLOSE_BLOCK, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 20, RULE_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 308; Match(SPACE);
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314; Match(CLOSE_BLOCK);
			State = 315; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public ITerminalNode TAG() { return GetToken(xmllangParser.TAG, 0); }
		public ITerminalNode ATTR() { return GetToken(xmllangParser.ATTR, 0); }
		public ITerminalNode ARRAY() { return GetToken(xmllangParser.ARRAY, 0); }
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitDatatype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_datatype);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317; Match(TAG);
				}
				break;
			case ATTR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318; Match(ATTR);
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319; Match(ARRAY);
				}
				break;
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 320; primitive();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 24, RULE_primitive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(xmllangParser.OPEN_BRACKET, 0); }
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(xmllangParser.CLOSE_BRACKET, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Function_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterFunction_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitFunction_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declContext function_decl() {
		Function_declContext _localctx = new Function_declContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 325; Match(SPACE);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331; Match(ID);
			State = 332; Match(OPEN_BRACKET);
			State = 333; function_args();
			State = 334; Match(CLOSE_BRACKET);
			State = 335; Match(SPACE);
			State = 336; Match(OPEN_BLOCK);
			State = 337; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public Empty_statContext empty_stat() {
			return GetRuleContext<Empty_statContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode[] ID() { return GetTokens(xmllangParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(xmllangParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(xmllangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(xmllangParser.COMMA, i);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_args);
		int _la;
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
			case CLOSE_BRACKET:
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE || _la==SPACE) {
					{
					State = 339; empty_stat();
					}
				}

				}
				break;
			case T__0:
			case T__1:
			case TAG:
			case ATTR:
			case ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; datatype();
				State = 343; Match(SPACE);
				State = 344; Match(ID);
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 345; Match(COMMA);
					State = 346; Match(SPACE);
					State = 347; datatype();
					State = 348; Match(SPACE);
					State = 349; Match(ID);
					}
					}
					State = 355;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_ifContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(xmllangParser.IF, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Begin_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterBegin_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitBegin_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_ifContext begin_if() {
		Begin_ifContext _localctx = new Begin_ifContext(Context, State);
		EnterRule(_localctx, 30, RULE_begin_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(IF);
			State = 359; Match(SPACE);
			State = 360; comparison();
			State = 361; Match(SPACE);
			State = 362; Match(OPEN_BLOCK);
			State = 363; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public Access_infoContext access_info() {
			return GetRuleContext<Access_infoContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode STRING() { return GetToken(xmllangParser.STRING, 0); }
		public ITerminalNode EQ() { return GetToken(xmllangParser.EQ, 0); }
		public ITerminalNode NOT() { return GetToken(xmllangParser.NOT, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 32, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; access_info();
			State = 366; Match(SPACE);
			State = 367;
			_la = TokenStream.LA(1);
			if ( !(_la==EQ || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 368; Match(SPACE);
			State = 369; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_thingContext : ParserRuleContext {
		public ITerminalNode CLOSE_BLOCK() { return GetToken(xmllangParser.CLOSE_BLOCK, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(xmllangParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(xmllangParser.SPACE, i);
		}
		public ITerminalNode ELSE() { return GetToken(xmllangParser.ELSE, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
		public ITerminalNode NEWLINE() { return GetToken(xmllangParser.NEWLINE, 0); }
		public Else_thingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_thing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterElse_thing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitElse_thing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_thing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_thingContext else_thing() {
		Else_thingContext _localctx = new Else_thingContext(Context, State);
		EnterRule(_localctx, 34, RULE_else_thing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(CLOSE_BLOCK);
			State = 372; Match(SPACE);
			State = 373; Match(ELSE);
			State = 374; Match(SPACE);
			State = 375; Match(OPEN_BLOCK);
			State = 376; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(xmllangParser.SWITCH, 0); }
		public ITerminalNode ID() { return GetToken(xmllangParser.ID, 0); }
		public ITerminalNode SPACE() { return GetToken(xmllangParser.SPACE, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(xmllangParser.OPEN_BLOCK, 0); }
		public ITerminalNode CLOSE_BLOCK() { return GetToken(xmllangParser.CLOSE_BLOCK, 0); }
		public Case_blockContext[] case_block() {
			return GetRuleContexts<Case_blockContext>();
		}
		public Case_blockContext case_block(int i) {
			return GetRuleContext<Case_blockContext>(i);
		}
		public Switch_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.EnterSwitch_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IxmllangListener typedListener = listener as IxmllangListener;
			if (typedListener != null) typedListener.ExitSwitch_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxmllangVisitor<TResult> typedVisitor = visitor as IxmllangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statContext switch_stat() {
		Switch_statContext _localctx = new Switch_statContext(Context, State);
		EnterRule(_localctx, 36, RULE_switch_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(SWITCH);
			State = 379; Match(ID);
			State = 380; Match(SPACE);
			State = 381; Match(OPEN_BLOCK);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 382; case_block();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 387; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\x188', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x6', '\x2', '*', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '+', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\x30', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x31', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x36', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x39', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\a', '\x5', '>', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x41', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'K', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'N', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'[', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '^', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'i', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'l', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'w', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', 'z', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x85', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x88', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x91', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x94', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\x9D', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\xA0', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xA9', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xAC', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\xB5', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\xB8', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xC1', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xC4', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x6', '\x5', '\xCC', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\xCD', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xD8', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\xDB', '\v', '\x5', '\a', '\x5', '\xDD', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\xE0', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\xE6', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\xE7', '\x3', '\x5', '\x3', '\x5', '\x6', 
		'\x5', '\xEC', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\xED', '\x5', 
		'\x5', '\xF0', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\xF5', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xF8', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x103', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x10E', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x115', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x11F', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\a', '\v', '\x127', '\n', '\v', '\f', '\v', '\xE', '\v', '\x12A', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\a', '\f', '\x138', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x13B', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x144', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\a', '\xF', '\x149', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x14C', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x5', '\x10', '\x157', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\x162', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x165', '\v', 
		'\x10', '\x5', '\x10', '\x167', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x6', '\x14', '\x182', '\n', 
		'\x14', '\r', '\x14', '\xE', '\x14', '\x183', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x2', '\x2', '\x15', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '\x2', '\x6', '\x4', '\x2', '\x1B', '\x1B', ')', 
		')', '\x4', '\x2', '\x1A', '\x1A', '$', '$', '\x3', '\x2', '\x3', '\x4', 
		'\x3', '\x2', '\x1D', '\x1E', '\x2', '\x1A8', '\x2', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '-', '\x3', '\x2', '\x2', '\x2', '\x6', ':', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x102', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\f', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x114', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x120', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x16', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x143', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x166', '\x3', '\x2', '\x2', '\x2', ' ', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x16F', '\x3', '\x2', '\x2', '\x2', '$', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x17C', '\x3', '\x2', '\x2', '\x2', '(', '*', 
		'\x5', '\x4', '\x3', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '-', '/', '\x5', '\x1C', '\xF', '\x2', '.', '\x30', '\x5', '\b', 
		'\x5', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x37', '\x5', '\x16', '\f', '\x2', '\x34', '\x36', '\x5', 
		'\x6', '\x4', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\t', '\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', '\x2', '\x2', 
		'<', '>', '\a', ')', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\b', '\x2', '\x2', '\x43', '\x44', '\a', ')', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\x18', '\x2', '\x2', '\x45', '\x46', '\a', '\'', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x1A', '\x2', '\x2', 'G', 'H', '\a', '(', '\x2', 
		'\x2', 'H', '\x103', '\a', '\x1B', '\x2', '\x2', 'I', 'K', '\a', ')', 
		'\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\a', '\n', '\x2', '\x2', 'P', 'Q', '\a', ')', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x18', '\x2', '\x2', 'R', 'S', '\a', '\'', 
		'\x2', '\x2', 'S', 'T', '\a', '\x1A', '\x2', '\x2', 'T', 'U', '\a', '*', 
		'\x2', '\x2', 'U', 'V', '\a', ')', '\x2', '\x2', 'V', 'W', '\a', '\x1A', 
		'\x2', '\x2', 'W', 'X', '\a', '(', '\x2', '\x2', 'X', '\x103', '\a', '\x1B', 
		'\x2', '\x2', 'Y', '[', '\a', ')', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', 
		'\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x5', '\x1A', '\xE', '\x2', '`', '\x61', '\a', ')', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\x18', '\x2', '\x2', '\x62', '\x63', '\a', ')', 
		'\x2', '\x2', '\x63', '\x64', '\a', '\x1C', '\x2', '\x2', '\x64', '\x65', 
		'\a', ')', '\x2', '\x2', '\x65', '\x66', '\x5', '\f', '\a', '\x2', '\x66', 
		'\x103', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\a', ')', '\x2', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 
		'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\xF', '\x2', '\x2', 'n', 'o', '\a', '\'', '\x2', '\x2', 
		'o', 'p', '\a', '\x18', '\x2', '\x2', 'p', 'q', '\a', '*', '\x2', '\x2', 
		'q', 'r', '\a', ')', '\x2', '\x2', 'r', 's', '\a', '\x1A', '\x2', '\x2', 
		's', 't', '\a', '(', '\x2', '\x2', 't', '\x103', '\a', '\x1B', '\x2', 
		'\x2', 'u', 'w', '\a', ')', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x12', '\x2', 
		'\x2', '|', '}', '\a', '\'', '\x2', '\x2', '}', '~', '\a', '\x18', '\x2', 
		'\x2', '~', '\x7F', '\a', '*', '\x2', '\x2', '\x7F', '\x80', '\a', ')', 
		'\x2', '\x2', '\x80', '\x81', '\a', '\x1A', '\x2', '\x2', '\x81', '\x82', 
		'\a', '(', '\x2', '\x2', '\x82', '\x103', '\a', '\x1B', '\x2', '\x2', 
		'\x83', '\x85', '\a', ')', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\x18', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', ')', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x1C', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', ')', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x1A', '\x2', 
		'\x2', '\x8E', '\x103', '\a', '\x1B', '\x2', '\x2', '\x8F', '\x91', '\a', 
		')', '\x2', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x18', '\x2', '\x2', '\x96', '\x97', '\a', ')', '\x2', 
		'\x2', '\x97', '\x98', '\a', ' ', '\x2', '\x2', '\x98', '\x99', '\a', 
		')', '\x2', '\x2', '\x99', '\x9A', '\a', '\x18', '\x2', '\x2', '\x9A', 
		'\x103', '\a', '\x1B', '\x2', '\x2', '\x9B', '\x9D', '\a', ')', '\x2', 
		'\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', 
		'\x18', '\x2', '\x2', '\xA2', '\xA3', '\a', ')', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\x1F', '\x2', '\x2', '\xA4', '\xA5', '\a', ')', '\x2', 
		'\x2', '\xA5', '\xA6', '\a', '\x18', '\x2', '\x2', '\xA6', '\x103', '\a', 
		'\x1B', '\x2', '\x2', '\xA7', '\xA9', '\a', ')', '\x2', '\x2', '\xA8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x18', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', ')', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\"', '\x2', '\x2', '\xB0', '\xB1', '\a', ')', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', '\x18', '\x2', '\x2', '\xB2', '\x103', '\a', '\x1B', '\x2', '\x2', 
		'\xB3', '\xB5', '\a', ')', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', '\x18', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', ')', '\x2', '\x2', '\xBB', '\xBC', '\a', '!', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', ')', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x18', '\x2', 
		'\x2', '\xBE', '\x103', '\a', '\x1B', '\x2', '\x2', '\xBF', '\xC1', '\a', 
		')', '\x2', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x13', '\x2', '\x2', '\xC6', '\xC7', '\a', ')', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\x18', '\x2', '\x2', '\xC8', '\x103', '\a', 
		'\x1B', '\x2', '\x2', '\xC9', '\xCB', '\x5', '\x14', '\v', '\x2', '\xCA', 
		'\xCC', '\x5', '\b', '\x5', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x5', '\x16', '\f', 
		'\x2', '\xD0', '\x103', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', 
		'\x18', '\x2', '\x2', '\xD2', '\xDE', '\a', '\'', '\x2', '\x2', '\xD3', 
		'\xD9', '\a', '\x18', '\x2', '\x2', '\xD4', '\xD5', '\a', '*', '\x2', 
		'\x2', '\xD5', '\xD6', '\a', ')', '\x2', '\x2', '\xD6', '\xD8', '\a', 
		'\x18', '\x2', '\x2', '\xD7', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '(', '\x2', 
		'\x2', '\xE2', '\x103', '\a', '\x1B', '\x2', '\x2', '\xE3', '\xE5', '\x5', 
		' ', '\x11', '\x2', '\xE4', '\xE6', '\x5', '\b', '\x5', '\x2', '\xE5', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEB', '\x5', '$', '\x13', '\x2', '\xEA', '\xEC', '\x5', '\b', '\x5', 
		'\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\x5', '\x16', '\f', '\x2', '\xF2', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF5', '\a', ')', '\x2', '\x2', '\xF4', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\n', '\x6', '\x2', '\xFA', 
		'\xFB', '\a', ')', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x1C', '\x2', 
		'\x2', '\xFC', '\xFD', '\a', ')', '\x2', '\x2', '\xFD', '\xFE', '\a', 
		'\x1A', '\x2', '\x2', '\xFE', '\xFF', '\a', '\x1B', '\x2', '\x2', '\xFF', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x5', '\x12', 
		'\n', '\x2', '\x101', '\x103', '\x5', '\x6', '\x4', '\x2', '\x102', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x102', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\\', '\x3', '\x2', '\x2', '\x2', '\x102', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x102', 'x', '\x3', '\x2', '\x2', '\x2', '\x102', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x102', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\x102', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x102', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x102', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\x102', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\t', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\x18', 
		'\x2', '\x2', '\x105', '\x106', '\a', '+', '\x2', '\x2', '\x106', '\x10E', 
		'\a', '\v', '\x2', '\x2', '\x107', '\x108', '\a', '\x18', '\x2', '\x2', 
		'\x108', '\x109', '\a', '+', '\x2', '\x2', '\x109', '\x10E', '\a', '\f', 
		'\x2', '\x2', '\x10A', '\x10B', '\a', '\x18', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '+', '\x2', '\x2', '\x10C', '\x10E', '\a', '\x11', '\x2', '\x2', 
		'\x10D', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\t', '\x3', '\x2', 
		'\x2', '\x110', '\r', '\x3', '\x2', '\x2', '\x2', '\x111', '\x115', '\a', 
		'\x18', '\x2', '\x2', '\x112', '\x115', '\a', '\x1A', '\x2', '\x2', '\x113', 
		'\x115', '\a', '$', '\x2', '\x2', '\x114', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x117', '\a', '\x15', '\x2', '\x2', '\x117', '\x118', '\x5', 
		'\xE', '\b', '\x2', '\x118', '\x119', '\a', '&', '\x2', '\x2', '\x119', 
		'\x11A', '\x5', '\x2', '\x2', '\x2', '\x11A', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11C', '\a', '\x16', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', '&', '\x2', '\x2', '\x11D', '\x11F', '\x5', '\x2', '\x2', '\x2', 
		'\x11E', '\x116', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x121', '\a', '\x10', '\x2', '\x2', '\x121', '\x122', '\a', ')', '\x2', 
		'\x2', '\x122', '\x123', '\x5', '\n', '\x6', '\x2', '\x123', '\x124', 
		'\a', '\x1B', '\x2', '\x2', '\x124', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x127', '\a', ')', '\x2', '\x2', '\x126', '\x125', '\x3', '\x2', 
		'\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x5', '\x2', '\x2', '\x12C', 
		'\x12D', '\a', ')', '\x2', '\x2', '\x12D', '\x12E', '\a', '\x18', '\x2', 
		'\x2', '\x12E', '\x12F', '\a', ')', '\x2', '\x2', '\x12F', '\x130', '\a', 
		'\a', '\x2', '\x2', '\x130', '\x131', '\a', ')', '\x2', '\x2', '\x131', 
		'\x132', '\a', '\x18', '\x2', '\x2', '\x132', '\x133', '\a', ')', '\x2', 
		'\x2', '\x133', '\x134', '\a', '-', '\x2', '\x2', '\x134', '\x135', '\a', 
		'\x1B', '\x2', '\x2', '\x135', '\x15', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x138', '\a', ')', '\x2', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '.', '\x2', '\x2', '\x13D', 
		'\x13E', '\a', '\x1B', '\x2', '\x2', '\x13E', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x13F', '\x144', '\a', '\b', '\x2', '\x2', '\x140', '\x144', '\a', 
		'\n', '\x2', '\x2', '\x141', '\x144', '\a', '\x13', '\x2', '\x2', '\x142', 
		'\x144', '\x5', '\x1A', '\xE', '\x2', '\x143', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '\x143', '\x140', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x19', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\t', '\x4', 
		'\x2', '\x2', '\x146', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x147', '\x149', 
		'\a', ')', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14E', '\a', '\x18', '\x2', '\x2', '\x14E', '\x14F', 
		'\a', '\'', '\x2', '\x2', '\x14F', '\x150', '\x5', '\x1E', '\x10', '\x2', 
		'\x150', '\x151', '\a', '(', '\x2', '\x2', '\x151', '\x152', '\a', ')', 
		'\x2', '\x2', '\x152', '\x153', '\a', '-', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\x1B', '\x2', '\x2', '\x154', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x157', '\x5', '\x6', '\x4', '\x2', '\x156', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x5', '\x18', 
		'\r', '\x2', '\x159', '\x15A', '\a', ')', '\x2', '\x2', '\x15A', '\x163', 
		'\a', '\x18', '\x2', '\x2', '\x15B', '\x15C', '\a', '*', '\x2', '\x2', 
		'\x15C', '\x15D', '\a', ')', '\x2', '\x2', '\x15D', '\x15E', '\x5', '\x18', 
		'\r', '\x2', '\x15E', '\x15F', '\a', ')', '\x2', '\x2', '\x15F', '\x160', 
		'\a', '\x18', '\x2', '\x2', '\x160', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x162', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x166', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\a', '\x6', 
		'\x2', '\x2', '\x169', '\x16A', '\a', ')', '\x2', '\x2', '\x16A', '\x16B', 
		'\x5', '\"', '\x12', '\x2', '\x16B', '\x16C', '\a', ')', '\x2', '\x2', 
		'\x16C', '\x16D', '\a', '-', '\x2', '\x2', '\x16D', '\x16E', '\a', '\x1B', 
		'\x2', '\x2', '\x16E', '!', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', 
		'\x5', '\n', '\x6', '\x2', '\x170', '\x171', '\a', ')', '\x2', '\x2', 
		'\x171', '\x172', '\t', '\x5', '\x2', '\x2', '\x172', '\x173', '\a', ')', 
		'\x2', '\x2', '\x173', '\x174', '\a', '\x1A', '\x2', '\x2', '\x174', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\a', '.', '\x2', '\x2', 
		'\x176', '\x177', '\a', ')', '\x2', '\x2', '\x177', '\x178', '\a', '\t', 
		'\x2', '\x2', '\x178', '\x179', '\a', ')', '\x2', '\x2', '\x179', '\x17A', 
		'\a', '-', '\x2', '\x2', '\x17A', '\x17B', '\a', '\x1B', '\x2', '\x2', 
		'\x17B', '%', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', '\x14', 
		'\x2', '\x2', '\x17D', '\x17E', '\a', '\x18', '\x2', '\x2', '\x17E', '\x17F', 
		'\a', ')', '\x2', '\x2', '\x17F', '\x181', '\a', '-', '\x2', '\x2', '\x180', 
		'\x182', '\x5', '\x10', '\t', '\x2', '\x181', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\a', 
		'.', '\x2', '\x2', '\x186', '\'', '\x3', '\x2', '\x2', '\x2', '#', '+', 
		'\x31', '\x37', '?', 'L', '\\', 'j', 'x', '\x86', '\x92', '\x9E', '\xAA', 
		'\xB6', '\xC2', '\xCD', '\xD9', '\xDE', '\xE7', '\xED', '\xEF', '\xF6', 
		'\x102', '\x10D', '\x114', '\x11E', '\x128', '\x139', '\x143', '\x14A', 
		'\x156', '\x163', '\x166', '\x183',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace xmllang
